defcomponent abstract_cell:
  <td></td>
~ {
    this.width = function (value) {
        this.node.style.width = value;
    };

    this.color = function (value) {
        this.node.style.color = value;
    };
}~

defcomponent cell abstract_cell:
  <td></td>
~ {
    this.value = function (value) {
        this.node.innerText = value;
    };

}~

defcomponent inputCell abstract_cell:
<td>
    <input type="text" style="margin:0;padding:0;border:0;height:100%;width:100%;"/>
</td>
~ {
    this.init = function () {
        this.node.style.padding = '0';
        this.node.style.height = '20px';
    };

    this.value = function (value) {
        if (value === undefined)
            return this.node.children[0].value;

        this.node.children[0].value = value;
    };
}~

defcomponent advCell abstract_cell:
<td class="cell cell-selected99">
    <input type="text" class="cell-input" />
    <div class="cell-mask"></div>
</td>
~ {
    this.init = function () {
        var _this = this,
            _input = this._input = this.node.children[0],
            _mask = this._mask = this.node.children[1];

        this.node.component = this;

        _mask.addEventListener("dblclick", function (event) {
            _input.focus();
        });

        _input.addEventListener("focus", function (event) {
            _this.editable(true);
        });

        _input.addEventListener("blur", function (event) {
            _this.editable(false);
        });
    };

    this.value = function (value) {
        if (value === undefined)
            return this._input.value;

        this._input.value = value;
    };

    this.editable = function (yesno, focus) {
        if (yesno) {
            this.selected(0);
            focus && this._input.focus();
        } else {
            this.selected(99);
        }
    };

    this.selected = function (mode) {
        this.node.className = this.node.className.replace(/\bcell-selected\d+\b/, "cell-selected" + mode);
    };
}~

defcomponent headCell cell:
<th>
    <span></span>
    <div style="position:absolute; right:0; top:0; width:2px; height:100%; cursor:e-resize;">&nbsp;</div>
</th>
~ {
    this.init = function () {
        this.node.style.position = 'relative';
        this.node.style.padding = '0px';

        var bar = this.node.children[1], x, orignWidth,
            move = function (event) {
                var diffx = event.clientX - x;
                bar.parentNode.style.width = (orignWidth + diffx) + 'px';
            },

            up = function (event) {
                document.body.removeEventListener('mousemove', move);
                document.body.removeEventListener('mouseup', up);
            };

        bar.addEventListener('mousedown', function (event) {
            orignWidth = parseInt(bar.parentNode.clientWidth);
            document.body.addEventListener('mousemove', move);
            document.body.addEventListener('mouseup', up);
            x = event.clientX;
        });

    };

    this.value = function (value) {
        this.node.children[0].innerText = value;
    };
}~

alias NAME advCell;
alias PHONE advCell;
alias ADDR advCell;

alias head_NAME headCell;
alias head_PHONE headCell;
alias head_ADDR headCell;

defcomponent ROW:
<tr></tr>
~ {
    this.init = function () {
        this.members.push( engine.createComponent("NAME.name") );
        this.members.push( engine.createComponent("PHONE") );
        this.members.push( engine.createComponent("ADDR") );

        var node = this.node;
        this.members.callFn( function () {
            node.appendChild( this.node );
        });

    };

    this.values = function (values) {

        if (values === undefined)
            return {
                NAME: this.members.NAME.value(),
                PHONE: this.members.PHONE.value(),
                ADDR: this.members.ADDR.value()
            };

        this.members.callFn(function () {
            this.value( values[ this.name ] );
        });

    };
}~

defcomponent DROW:
<tr></tr>
~ {
    this.init = function (cellnames) {
        var cellNames = this.cellNames = [],
            that = this;

        cellnames.split(/\s+/).forEach(function (e, i) {
            cell = engine.createComponent(e);
            cellNames.push(e);
            that.node.appendChild(cell.node);
            that.members.push(cell);
            that.members[ e ] = cell;
        });
    };

    this.values = function (values) {
        var that = this;
        this.cellNames.forEach(function (e, i) {
            that.members[ e ].value( values[e] );
        });
    };
}~

defcomponent GRID1:
<table></table>
~ {
    this.appendRow = function (record) {
        var row = engine.createComponent("ROW");
        this.node.appendChild(row.node);
        this.members.push(row);
        row.values(record);
    };

    this.removeRow = function (rowIndex) {
        var row = this.members.splice(rowIndex, 1)[0];
        row.node.parentNode.removeChild(row.node);
    };
}~

alias napROW DROW("NAME ADDR PHONE");

defcomponent GRID2:
<table>
    <thead></thead>
    <tbody></tbody>
</table>
~ {
    this.init = function (columnNames) {
        var _this = this;
        this.columnNames = columnNames;
        this.thead = this.node.children[0];
        this.tbody = this.node.children[1];

        var headNames = columnNames.split(/\s+/).map(function (e, i) {
                return 'head_' +  e;
            }).join(' '),
            headRow = engine.createComponent("DROW#head", [ headNames ]);

        this.members.push(headRow);
        this.thead.appendChild(headRow.node);

        /*
        this.tbody.addEventListener("mousedown", function (event) {
            var target = event.target;
            while ( !target.component && target !== this)
                target = target.parentNode;
            target = target.component;
            if (target) {
                _this.selected && _this.selected.selected(99);
                _this.selected = target;
                target.selected(0);
            }
        });
        */
    };

    this.appendRow = function (record) {
        var row = engine.createComponent("DROW.row", [ this.columnNames ]);
        this.tbody.appendChild(row.node);
        this.members.push(row);
        row.values(record);
    };

    this.removeRow = function (rowIndex) {
        var row = this.members.splice(+rowIndex +1, 1)[0];
        row.node.parentNode.removeChild(row.node);
    };
}~

alias GRID3 GRID2("NAME PHONE ADDR");
alias GRID4 GRID2("PHONE ADDR NAME");

defrule setWidth {
    */head_NAME */NAME: width("40px");
    */head_PHONE */PHONE: width("90px");
    */head_ADDR */ADDR: width("80px");
}

defrule setColor (color) {
    */NAME: color(color);
    */PHONE: color("green");
}

defrule setHead {
    */head_NAME: value("NAME");
    */head_PHONE: value("PHONE");
    */head_ADDR: value("ADDR");
}

defrun {
    window.grid = engine.createComponent("GRID3");;
    document.body.appendChild(grid.node);
    grid.appendRow({NAME: 'San', PHONE: 123});
    grid.appendRow({NAME: 'Sam', PHONE: 58775890});
    grid.appendRow({NAME: 'Sam', PHONE: 58775891});
    grid.appendRow({NAME: 'Sam', PHONE: 58775892});
    engine.rules.setWidth.apply(grid);
    engine.rules.setHead.apply(grid);
}~
